"""
This type stub file was generated by pyright.
"""

"""
parsedatetime/context.py

Context related classes

"""
from typing import Any

VERSION_FLAG_STYLE: int = ...
VERSION_CONTEXT_STYLE: int = ...

class pdtContextStack:
    """
    A thread-safe stack to store context(s)

    Internally used by L{Calendar} object
    """

    def __init__(self) -> None: ...
    def push(self, ctx: pdtContext) -> None: ...
    def pop(self) -> Any | None: ...
    def last(self) -> Any: ...
    def isEmpty(self) -> bool: ...

class pdtContext:
    """
    Context contains accuracy flag detected by L{Calendar.parse()}

    Accuracy flag uses bitwise-OR operation and is combined by:

        ACU_YEAR - "next year", "2014"
        ACU_MONTH - "March", "July 2014"
        ACU_WEEK - "last week", "next 3 weeks"
        ACU_DAY - "tomorrow", "July 4th 2014"
        ACU_HALFDAY - "morning", "tonight"
        ACU_HOUR - "18:00", "next hour"
        ACU_MIN - "18:32", "next 10 minutes"
        ACU_SEC - "18:32:55"
        ACU_NOW - "now"

    """

    __slots__: tuple[str, ...]
    ACU_YEAR: int = ...
    ACU_MONTH: int = ...
    ACU_WEEK: int = ...
    ACU_DAY: int = ...
    ACU_HALFDAY: int = ...
    ACU_HOUR: int = ...
    ACU_MIN: int = ...
    ACU_SEC: int = ...
    ACU_NOW: int = ...
    ACU_DATE: int = ...
    ACU_TIME: int = ...
    _ACCURACY_MAPPING: int = ...
    _ACCURACY_REVERSE_MAPPING: int = ...
    def __init__(self, accuracy: int = ...) -> None:
        """
        Default constructor of L{pdtContext} class.

        @type  accuracy: integer
        @param accuracy: Accuracy flag

        @rtype:  object
        @return: L{pdtContext} instance
        """
        ...
    def updateAccuracy(self, *accuracy: int) -> None:
        """
        Updates current accuracy flag
        """
        ...
    def update(self, context: pdtContext) -> None:
        """
        Uses another L{pdtContext} instance to update current one
        """
        ...
    @property
    def hasDate(self) -> bool:
        """
        Returns True if current context is accurate to date
        """
        ...
    @property
    def hasTime(self) -> bool:
        """
        Returns True if current context is accurate to time
        """
        ...
    @property
    def dateTimeFlag(self) -> int:
        """
        Returns the old date/time flag code
        """
        ...
    @property
    def hasDateOrTime(self) -> bool:
        """
        Returns True if current context is accurate to date/time
        """
        ...
    def __repr__(self) -> str: ...
    def __eq__(self, ctx: pdtContext) -> bool: ...
